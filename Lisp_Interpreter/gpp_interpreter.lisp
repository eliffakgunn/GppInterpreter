; *********************************************
; *  341 Programming Languages                *
; *  Fall 2020                                *
; *  Author: Elif Akgun                       *
; *********************************************

;if user enters file name it reads file line by line then sends the line to the lexer 
;if user does not enter file name it reads console then sends input to the lexer 
;if lexer does not return nil, then it sends lexemes to parser
(defun gppinterpreter(&optional file)
	(setq lexemes '())

    (with-open-file (stream "parsed_lisp.txt" :direction :output))

    (when (equal file nil) ;terminalden okuyacaksa
	    (setq line "")

        (setf line (read-line))

        (loop while (/= 0 (length line)) do
            (setf lexemes (lexer line))

            (if (not (equal lexemes nil))
                (multiple-value-bind (strList tokenList) (split lexemes)
                    (if (equal (checkParentheses strList) t)
                        (progn
                            (setq parserRes (parser strList tokenList))
                            (when (not (equal parserRes "exception"))
                                (format t "Syntax OK.~%")
                                (format t "Result: ~A~%~%" parserRes) 
                                (with-open-file (str "parsed_lisp.txt" :direction :output :if-exists :append :if-does-not-exist :create)
                                   (format str "Syntax OK.~%")
                                   (format str "Result: ~A~%~%" parserRes)
                                   (close str)) 
                            )
                            (when (equal parserRes "exception")
                                (format t "SYNTAX_ERROR Expression not recognized~%~%")
                                (with-open-file (str "parsed_lisp.txt" :direction :output :if-exists :append :if-does-not-exist :create)
                                    (format str "SYNTAX_ERROR Expression not recognized~%~%")
                                    (close str))                                
                                (return-from gppinterpreter) ;hata gelince çıksın mı
                            )
                        )
                        (progn
                            (format t "Parentheses are not balanced.~%~%")
                            (with-open-file (str "parsed_lisp.txt" :direction :output :if-exists :append :if-does-not-exist :create)
                                (format str "Parentheses are not balanced.~%~%")
                                (close str))                            
                            (return-from gppinterpreter) ;hata gelince çıksın mı
                        )
                    )
                )    
                (progn                 
                    ;(format t "SYNTAX_ERROR Expression not recognized~%~%")
                    (with-open-file (str "parsed_lisp.txt" :direction :output :if-exists :append :if-does-not-exist :create)
                        (format str "SYNTAX_ERROR Expression not recognized~%~%")
                        (close str))
                    (return-from gppinterpreter) ;hata gelince çıksın mı
                )
            )   

            (setf line (read-line))        
        )
	    (return-from gppinterpreter)    	
    )

    ;dosya okuyacaksa
	(let ((in (open file)))
		(when in
			(loop for line = (read-line in nil)
				while line do
					(setf lexemes (lexer line ))

		    		(multiple-value-bind (strList tokenList) (split lexemes)
                        (when (equal (checkParentheses strList) t)
    			            (setq parserRes (parser strList tokenList))
    			            (when (not (equal parserRes "exception"))
    			                (format t "Syntax OK.~%")
    			                (format t "Result: ~A~%~%" parserRes) 
                                (with-open-file (str "parsed_lisp.txt" :direction :output :if-exists :append :if-does-not-exist :create)
                                    (format str "Syntax OK.~%")
                                    (format str "Result: ~A~%~%" parserRes)
                                    (close str)) 
    			            )
                            (when (equal parserRes "exception")
                                (format t "SYNTAX_ERROR Expression not recognized~%~%")
                                (with-open-file (str "parsed_lisp.txt" :direction :output :if-exists :append :if-does-not-exist :create)
                                    (format str "SYNTAX_ERROR Expression not recognized~%~%")
                                    (close str))                                
                                (return-from gppinterpreter) ;hata gelince çıksın mı
                            )
                        )
                        (when (not (equal (checkParentheses strList) t))
                            (format t "Parentheses are not balanced.~%~%")
                            (with-open-file (str "parsed_lisp.txt" :direction :output :if-exists :append :if-does-not-exist :create)
                                (format str "Parentheses are not balanced.~%~%")
                                (close str))                            
                            (return-from gppinterpreter) ;hata gelince çıksın mı
                        )
			        ) 			
			)
			(close in)		
		)
	)  

	(return-from gppinterpreter)  
)


(defun split(lexemes)
	(setq token '())
	(setq word '())

	(loop for i from 0 to (- (length lexemes) 1) do
		(setf word (append word (list (nth 0 (nth i lexemes)))))
		(setf token (append token (list (nth 1 (nth i lexemes)))))
	)

	(values word token)
)

;parser
(defun parser(strList tokenList)
	;;(print strList)
	;;(print tokenList)
	(setq retVal nil) 
	(setq errFlag t)
	(setq totalSum 0) 
	(setq err t)	

    ;ok
    (when (equal tokenList nil) ;????nilse napsın
        (return-from parser t)
    )

    ;ok
    (when (= 1 (length tokenList))
        (when (string-equal (nth 0 tokenList) "VALUE")
            (setq retVal (nth 0 strList))
            (setq errFlag nil)
        )
        (when (string-equal (nth 0 tokenList) "IDENTIFIER")
            (setq retVal (nth 0 strList))
            (setq errFlag nil)
        )
        (when (string-equal (nth 0 tokenList) "KW_TRUE")
            (setq retVal t)
            (setq errFlag nil)
        )
        (when (or (string-equal (nth 0 tokenList) "KW_FALSE") (string-equal (nth 0 tokenList) "KW_NIL"))
            (setq retVal nil)
            (setq errFlag nil)
        )
    ) 

    ;ok
    (when (and (string-equal (nth 0 tokenList) "OP_OP") (string-equal (nth 1 tokenList) "OP_PLUS"))
        (setq errFlag nil)
   		(setq ret (operation strList tokenList "OP_PLUS"))
   		(if (equal ret nil)
   			(return-from parser "exception")
   			(setq retVal ret)
   		)
   	)

    ;ok
   	(when (and (string-equal (nth 0 tokenList) "OP_OP") (string-equal (nth 1 tokenList) "OP_DIV"))
        (setq errFlag nil)
   		(setq ret (operation strList tokenList "OP_DIV"))
   		(if (equal ret nil)
   			(return-from parser "exception")
   			(setq retVal ret)
   		)
   	)

    ;ok
   	(when (and (string-equal (nth 0 tokenList) "OP_OP") (string-equal (nth 1 tokenList) "OP_MULT"))
        (setq errFlag nil)
   		(setq ret (operation strList tokenList "OP_MULT"))
   		(if (equal ret nil)
   			(return-from parser "exception")
   			(setq retVal ret)
   		)
   	)   

    ;ok
   	(when (and (string-equal (nth 0 tokenList) "OP_OP") (string-equal (nth 1 tokenList) "OP_DBLMULT"))
        (setq errFlag nil)
   		(setq ret (operation strList tokenList "OP_DBLMULT"))
   		(if (equal ret nil)
   			(return-from parser "exception")
   			(setq retVal ret)
   		)
   	)  

    ;ok
   	(when (and (string-equal (nth 0 tokenList) "OP_OP") (string-equal (nth 1 tokenList) "OP_MINUS"))
        (setq errFlag nil)
   		(setq ret (operation strList tokenList "OP_MINUS"))
   		(if (equal ret nil)
   			(return-from parser "exception")
   			(setq retVal ret)
   		)
   	)   	 		

    ;ok
   	(when (and (string-equal (nth 0 tokenList) "OP_OP") (string-equal (nth 1 tokenList) "KW_AND"))
        (setq errFlag nil)
   		(setq ret (logic strList tokenList "KW_AND"))
   		(if (equal ret 0)
   			(return-from parser "exception")
   			(setq retVal ret)
   		)
   	)  

    ;ok
   	(when (and (string-equal (nth 0 tokenList) "OP_OP") (string-equal (nth 1 tokenList) "KW_OR"))
        (setq errFlag nil)
   		(setq ret (logic strList tokenList "KW_OR"))
   		(if (equal ret 0)
   			(return-from parser "exception")
   			(setq retVal ret)
   		)
   	)    	

    (when (and (string-equal (nth 0 tokenList) "OP_OP") (string-equal (nth 1 tokenList) "KW_NOT"))
        (setq boolFlag nil) 
        (setq err t)
        (setq errFlag nil)
        (when (string-equal (nth 2 tokenList) "KW_TRUE")
            (setq boolFlag nil)
            (setq err nil)
        )
        (when (or (string-equal (nth 2 tokenList) "KW_FALSE") (string-equal (nth 2 tokenList) "KW_NIL"))
            (setq boolFlag t)
            (setq err nil)
        )        

        (when (string-equal (nth 2 tokenList) "OP_OP")
            (setq ind 2)
        	(setq i 2)
        	(setq counter 1)
            (loop while (/= counter 0) do
                (setq i (+ i 1))
                (if (string-equal (nth i tokenList) "OP_OP")
                    (setq counter (+ counter 1))
                    (progn
                        (when (string-equal (nth i tokenList) "OP_CP")
                            (setq counter (- counter 1)))
                    )
                )
            )

            (setq returnVal (parser (subseq strList ind (+ i 1)) (subseq tokenList ind (+ i 1))))

            (if (typep returnVal 'boolean)
                (setq err nil)
            	(setq err t)
            )

            (setq ret (not returnVal))

            (if (equal err nil) 
                (setq boolFlag ret)
                (progn
                    ;;(format t "SYNTAX_ERROR Expression not recognized~%~%")
                    (return-from parser "exception")
            	)
            )
        )
        (if (string-equal (nth 2 tokenList) "OP_CP") 
            (setq err nil)
        )
        (when (equal err T)
            ;;(format t "SYNTAX_ERROR Expression not recognized~%~%")
            (return-from parser "exception")
        )
        (setq retVal boolFlag)   
    )   

    (when (and (string-equal (nth 0 tokenList) "OP_OP") (string-equal (nth 1 tokenList) "KW_EQUAL"))
        (setq boolFlag nil) 
        (setq err t) 
        (setq counter2 0)
        (setq errFlag nil)
        (loop for i from 2 to (- (length strList) 1) do
            (when (or (string-equal (nth i tokenList) "KW_TRUE") (string-equal (nth i tokenList) "KW_NIL") (string-equal (nth i tokenList) "KW_FALSE"))
                (setq counter2 (+ counter2 1))
                (if (= i 2)
                	(progn
                        (if (string-equal (nth i tokenList) "KW_TRUE")
                            (setq boolFlag t)
                        	(setq boolFlag nil)
                        )
                    )
                    (progn
                        (if (string-equal (nth i tokenList) "KW_TRUE")
                            (setq boolFlag (equal boolFlag t))
                        	(setq boolFlag (equal boolFlag nil))
                        )
                    )
                )
                (setq err nil)
            )

            (when (string-equal (nth i tokenList) "VALUE") 
                (setq counter2 (+ counter2 1))
                (when (/= i 2)
                    (setq boolFlag (equal boolFlag (parse-integer (nth i strList)))))
                (when (= i 2)
                    (setq boolFlag (parse-integer (nth i strList))))
                (setq err nil)
            )

            (when (string-equal (nth i tokenList) "OP_OP")
                (setq counter2 (+ counter2 1))
                (setq ind i)
                (setq counter 1)

                (loop while (/= counter 0) do
                    (setq i (+ i 1))
                    (if (string-equal (nth i tokenList) "OP_OP")
                        (setq counter (+ counter 1))
                        (progn
                            (when (string-equal (nth i tokenList) "OP_CP")
                                (setq counter (- counter 1)))
                        )
                    )
                )

                (setq returnVal (parser (subseq strList ind (+ i 1)) (subseq tokenList ind (+ i 1))))

                (if (or (and (typep boolFlag 'integer) (typep returnVal 'integer)) (and (typep boolFlag 'boolean) (typep returnVal 'boolean)) (equal boolFlag nil)) 
                    (progn
                        (if (= ind 2)
                            (setq boolFlag returnVal)
                        	(setq boolFlag (equal boolFlag returnVal))
                        )
                        (setq err nil);else
                    )
                    (progn
                        ;(format t "SYNTAX_ERROR Expression not recognized~%~%")
                        (return-from parser "exception")
                    )
                )
            )

            (when (or (> counter2 2) (equal err t))
                ;(format t "SYNTAX_ERROR Expression not recognized~%~%")
                (return-from parser "exception")
            )
        )
        (setq retVal boolFlag)
    )   

    (when (and (string-equal (nth 0 tokenList) "OP_OP") (string-equal (nth 1 tokenList) "KW_LESS"))
        (setq boolFlag 0) 
        (setq err t) 
        (setq counter2 0)
        (setq errFlag nil)
        (loop for i from 2 to (- (length strList) 1) do
            (when (string-equal (nth i tokenList) "VALUE") 
                (setq parsedInt (parse-integer (nth i strList)))
                (setq counter2 (+ counter2 1))

                (when (= i 2)
                    (setq boolFlag parsedInt))
                (when (/= i 2) 
                    (if (< boolFlag parsedInt)
                        (setq boolFlag t)
                        (setq boolFlag nil)
                    )
                )
                (setq err nil)
            )
            (when (string-equal (nth i tokenList) "OP_OP")
                (setq counter2 (+ counter2 1))
                (setq ind i)
                (setq counter 1)
                
                (loop while (/= counter 0) do
                    (setq i (+ i 1))
                    (if (string-equal (nth i tokenList) "OP_OP")
                        (setq counter (+ counter 1))
                        (progn
                            (when (string-equal (nth i tokenList) "OP_CP")
                                (setq counter (- counter 1)))
                        )
                    )
                )

                (setq returnVal (parser (subseq strList ind (+ i 1)) (subseq tokenList ind (+ i 1))))

                (if (typep returnVal 'integer)
                    (setq err nil)
                	(setq err t)
                )

                (if (equal err nil) 
                	(progn
                        (if (= ind 2)
                            (setq boolFlag returnVal)
                        	(setq boolFlag (< boolFlag returnVal))
                        )
                    )
                    (progn ;else
                        ;(format t "SYNTAX_ERROR Expression not recognized~%~%")
                        (return-from parser "exception")
                	)
                )
            )

            (when (or (> counter2 2) (equal err t))
                ;(format t "SYNTAX_ERROR Expression not recognized~%~%")
                (return-from parser "exception")
            )
        )
        (if (= counter2 1)
            (setq retVal t)
        	(setq retVal boolFlag)
        )  
    )   

    (when (and (string-equal (nth 0 tokenList) "OP_OP") (string-equal (nth 1 tokenList) "KW_CONCAT"))
        (setq liste '()) 
        (setq err t) 
        (setq counter2 0)
        (setq errFlag nil)
        (loop for i from 2 to (- (length strList) 1) do
            (when (or (string-equal (nth i tokenList) "OP_LISTOP")
                (and (string-equal (nth i tokenList) "OP_OP") (or (string-equal (nth (+ i 1) tokenList) "KW_APPEND") (string-equal (nth (+ i 1) tokenList) "KW_CONCAT"))))
         
                (setq counter2 (+ counter2 1))
                (setq ind i)
                (setq counter 1)

                (loop while (/= counter 0) do
                    (setq i (+ i 1))
                    (if (or (string-equal (nth i tokenList) "OP_OP") (string-equal (nth i tokenList) "OP_LISTOP"))
                        (setq counter (+ counter 1))
                        (progn
                            (when (string-equal (nth i tokenList) "OP_CP")
                                (setq counter (- counter 1)))
                        )
                    )
                )

                (setq returnVal (parser (subseq strList ind (+ i 1)) (subseq tokenList ind (+ i 1))))

                (if (typep returnVal 'list)
                    (setq err nil)
                	(setq err t)
                )

                (if (equal err nil) 
                    (setq liste (append liste returnVal))
                	(progn	
                        ;(format t "SYNTAX_ERROR Expression not recognized~%~%")
                        (return-from parser "exception")
                	)
                )
                (setq err nil)
            )

            (when (or (> counter2 2) (equal err t))
                ;(format t "SYNTAX_ERROR Expression not recognized~%~%")
                (return-from parser "exception")
            )
        )
        (if (= counter2 1)
            (setq retVal t)
        	(setq retVal liste)
        )  
    )   

    (when (and (string-equal (nth 0 tokenList) "OP_OP") (string-equal (nth 1 tokenList) "KW_APPEND"))
        (setq liste '())
        (setq err t)
        (setq listFlag 0)
        (setq expiFlag 0)
        (setq ind1 -1)
        (setq ind2 ind1) 
        (setq errFlag nil)

        (loop for i from 2 to (- (length strList) 1) do
            (when (string-equal (nth i tokenList) "VALUE")
                (setq err nil)
                (setq expiFlag (+ expiFlag 1))
                (setq ind1 i)
                (setq liste (append liste (list (parse-integer (nth i strList)))))
            ) 

            (when (or (string-equal (nth i tokenList) "OP_LISTOP") 
                        (and (string-equal (nth i tokenList) "OP_OP") (or (string-equal (nth (+ i 1) tokenList) "KW_CONCAT") (string-equal (nth (+ i 1) tokenList) "KW_APPEND"))))

                (setq listFlag (+ listFlag 1))
                (setq ind2 i)
                (setq ind i)
                (setq counter 1)
                
                (loop while (/= counter 0) do
                    (setq i (+ i 1))
                    (if (or (string-equal (nth i tokenList) "OP_OP") (string-equal (nth i tokenList) "OP_LISTOP"))
                        (setq counter (+ counter 1))
                        (progn
                            (when (string-equal (nth i tokenList) "OP_CP")
                                (setq counter (- counter 1)))
                        )
                    )
                )

                (setq returnVal (parser (subseq strList ind (+ i 1)) (subseq tokenList ind (+ i 1))))

                (if (typep returnVal 'list)
                    (setq err nil)
                    (setq err t)
                )
                (if (equal err nil) 
                    (setq liste (append liste returnVal))
                    (progn
                        ;(format t "SYNTAX_ERROR Expression not recognized~%~%")
                        (return-from parser "exception")
                    )
                )
                (setq err nil)
            )            

            (when (and (string-equal (nth i tokenList) "OP_OP") (not (or (string-equal (nth i tokenList) "OP_LISTOP") 
                    (and (string-equal (nth i tokenList) "OP_OP") (or (string-equal (nth (+ i 1) tokenList) "KW_APPEND") (string-equal (nth (+ i 1) tokenList) "KW_CONCAT"))))))
                (setq ind1 i)
                (setq expiFlag (+ expiFlag 1))
                (setq ind i)
                (setq counter 1)

                (loop while (/= counter 0)
                    do
                    (setq i (+ i 1))
                    (if (string-equal (nth i tokenList) "OP_OP")
                        (setq counter (+ counter 1))
                        (when (string-equal (nth i tokenList) "OP_CP")
                            (setq counter (- counter 1))
                        )
                    )
                )

                (setq returnVal (parser (subseq strList ind (+ i 1)) (subseq tokenList ind (+ i 1))))

                (if (typep returnVal 'integer)
                    (setq err nil)
                	(setq err t)
                )
                (if (equal err nil) 
                    (setq liste (append liste (list returnVal)))
                    (progn;else
                        ;(format t "SYNTAX_ERROR Expression not recognized~%~%")
                        (return-from parser "exception")
                	)
                )
                (setq err nil)
            )

            (when (or (> expiFlag 1) (> listFlag 1) (equal err t))
                ;(format t "SYNTAX_ERROR Expression not recognized~%~%")
                (return-from parser "exception")
            )
        )

        (when (or (<= ind2 ind1) (/= expiFlag 1) (/= listFlag 1))
            ;(format t "SYNTAX_ERROR Expression not recognized~%~%")
            (return-from parser "exception")
        )
        (setq retVal liste)
    )   

    (when (and (string-equal (nth 0 tokenList) "OP_OP") (string-equal (nth 1 tokenList) "KW_EXIT") (string-equal (nth 2 tokenList) "OP_CP") )
        (setq retVal t)
        (setq errFlag nil)
    )

    (when (and (string-equal (nth 0 tokenList) "OP_OP") (string-equal (nth 1 tokenList) "KW_LOAD"))
        (when (and (string-equal (nth 2 tokenList) "OP_OC") (string-equal (nth 3 tokenList) "IDENTIFIER") (string-equal (nth 4 tokenList) "OP_CC") (string-equal (nth 5 tokenList) "OP_CP"))
            (setq retVal (nth 3 strList))
            (setq errFlag nil)
        )
    )

    (when (and (string-equal (nth 0 tokenList) "OP_OP") (string-equal (nth 1 tokenList) "KW_DEFFUN") (string-equal (nth 2 tokenList) "IDENTIFIER"))
        (setq errFlag nil)
        (setq count1 0) 
        (setq count2 0) 
        (setq identNum 0) 
        (setq listNum 0)
        (setq ident (nth 2 strList))
        (setq frm 3)
        (setq to_ (- (length strList) 1))

        (loop for i from frm to to_ do
            (when (and (string-equal (nth i tokenList) "OP_OP") (string-equal (nth (+ 1 i) tokenList) "IDENTIFIER"))
                (setq identNum i)
                (setq count1 (+ count1 1))
            )

            (when (or (string-equal (nth i tokenList) "OP_LISTOP") 
                    (and (string-equal (nth i tokenList) "OP_OP") (or (string-equal (nth (+ i 1) tokenList) "KW_CONCAT") (string-equal (nth (+ i 1) tokenList) "KW_APPEND"))))

                (setq listNum i)
                (setq count2 (+ count2 1))
                (setq ind i)
                (setq counter 1)

                (loop while (/= counter 0) do
                    (setq i (+ i 1))
                    (if (or (string-equal (nth i tokenList) "OP_OP") (string-equal (nth i tokenList) "OP_LISTOP"))
                        (setq counter (+ counter 1))
                        (progn
                            (when (string-equal (nth i tokenList) "OP_CP")
                                (setq counter (- counter 1)))
                        )
                    )
                )

                (setq returnVal (parser (subseq strList ind (+ i 1)) (subseq tokenList ind (+ i 1))))
                (if (typep returnVal 'list)
                    (setq err nil)
                	(setq err t)
                )
                (when (equal err T)
                    ;(format t "SYNTAX_ERROR Expression not recognized~%~%")
                    (return-from parser "exception")
                )
            )
        )
        (when (or (= identNum 0) (= listNum 0) (> count2 1) (> count1 1) (> identNum listNum))
            ;(format t "SYNTAX_ERROR Expression not recognized~%~%")
            (return-from parser "exception")
        )
        (setq retVal ident)
    )

    (when (and (string-equal (nth 0 tokenList) "OP_OP") (or (string-equal (nth 1 tokenList) "KW_IF") (string-equal (nth 1 tokenList) "KW_WHILE")))
        (setq boolFlag nil)  
        (setq err t) 
        (setq listFlag 0)        
        (setq explist1 nil) 
        (setq explist2 nil)
        (setq errFlag nil)
        (setq tempFlag nil)

        (when (string-equal (nth 2 tokenList) "KW_TRUE")
            (setq boolFlag t)
        	(setq tempFlag t)
        )
        (when (or (string-equal (nth 2 tokenList) "KW_NIL") (string-equal (nth 2 tokenList) "KW_FALSE"))
        	(setq boolFlag nil)
            (setq tempFlag t)
        )

        (when (string-equal (nth 2 tokenList) "OP_OP")
        	(setq ind 2)
        	(setq i 2)
        	(setq counter 1)
            (setq tempFlag t)

            (loop while (/= counter 0) do
                (setq i (+ i 1))
                (if (string-equal (nth i tokenList) "OP_OP")
                    (setq counter (+ counter 1))
                    (progn
                    	(when (string-equal (nth i tokenList) "OP_CP")
                        	(setq counter (- counter 1)))
                    )
                )
            )

            (setq returnVal (parser (subseq strList ind (+ i 1)) (subseq tokenList ind (+ i 1))))

            (if (typep returnVal 'boolean)
                (setq err nil)
            	(setq err t)
            )

            (if (equal err nil) 
                (if (= ind 2)
                    (setq boolFlag returnVal)
                	(setq boolFlag (or boolFlag returnVal))
                )
                (progn
                    ;(format t "SYNTAX_ERROR Expression not recognized~%~%")
                    (return-from parser "exception")
            	)
            )
        )

        (loop for i from 2 to (- (length strList) 1) do
            (when (or (string-equal (nth i tokenList) "OP_LISTOP") 
                  (and (string-equal (nth i tokenList) "OP_OP") (or (string-equal (nth (+ i 1) tokenList) "KW_APPEND") (string-equal (nth (+ i 1) tokenList) "KW_CONCAT"))))
   
                (setq listFlag (+ listFlag 1))
                (setq ind i)
                (setq counter 1)

                (loop while (/= counter 0) do
                    (setq i (+ i 1))
                    (if (or (string-equal (nth i tokenList) "OP_OP") (string-equal (nth i tokenList) "OP_LISTOP"))
                        (setq counter (+ counter 1))
                        (progn
                            (when (string-equal (nth i tokenList) "OP_CP")
                                (setq counter (- counter 1)))
                        )
                    )
                )

                (setq returnVal (parser (subseq strList ind (+ i 1)) (subseq tokenList ind (+ i 1))))

                (if (typep returnVal 'list)
                    (setq err nil)
                	(setq err t)
                )

                (if (equal err nil)
                	(progn
                        (setq liste '())

                        (if (= listFlag 1)
                            (setq explist1 (append liste returnVal))
                            (progn
                                (when (= listFlag 2)
                                    (setq explist2 (append liste returnVal)))
                            )
                        ) 
                    )
                    (progn
                        ;(format t "SYNTAX_ERROR Expression not recognized~%~%")
                        (return-from parser "exception")
                	)
                )
            )
        )

        (when (or (> listFlag 2) (= listFlag 0) (equal tempFlag nil))
            ;(format t "SYNTAX_ERROR Expression not recognized~%~%")
            (return-from parser "exception")
        )
           
        (if (equal boolFlag t)
            (setq retVal explist1)
        	(setq retVal explist2)
        )
    )   

    (when (and (string-equal (nth 0 tokenList) "OP_OP") (string-equal (nth 1 tokenList) "KW_FOR") (string-equal (nth 2 tokenList) "OP_OP") (string-equal (nth 3 tokenList) "IDENTIFIER"))
        (setq errFlag nil)
        (setq liste 0) 
        (setq err t)
        (setq parCounter 0)
        (setq forCount 0)
        (setq listFlag 0)
        (setq i 4)
        (setq parCounter (+ parCounter 1))
        (loop while (and (< i (- (length strList) 1)) (/= parCounter 0)) do
            (when (string-equal (nth i tokenList) "OP_OP")
                (setq forCount (+ forCount 1))
                (setq ind i)
                (setq counter 1)

                (loop while (/= counter 0) do
                    (setq i (+ i 1))
                    (if (string-equal (nth i tokenList) "OP_OP")
                        (setq counter (+ counter 1))
                        (progn
                            (when (string-equal (nth i tokenList) "OP_CP")
                                (setq counter (- counter 1)))
                        )
                    )
                )

                (setq returnVal (parser (subseq strList ind (+ i 1)) (subseq tokenList ind (+ i 1))))

                (if (typep returnVal 'integer)
                    (setq err nil)
                	(setq err t)
                )
                (when (equal err T)
                    ;(format t "SYNTAX_ERROR Expression not recognized~%~%")
                    (return-from parser "exception")
                )
                (setq err nil)
            )
            (when (string-equal (nth i tokenList) "OP_CP")
                (setq parCounter (- parCounter 1))
                (setq err nil)
            )
            (when (string-equal (nth i tokenList) "VALUE")
                (setq forCount (+ forCount 1))
                (setq err nil)
            )
            (when (equal err T)
                ;(format t "SYNTAX_ERROR Expression not recognized~%~%")
                (return-from parser "exception")
            )
            (setq i (+ i 1))
        )

        (if (= forCount 2)
            (progn
                (when (or (string-equal (nth i tokenList) "OP_LISTOP") 
                        (and (string-equal (nth i tokenList) "OP_OP") (or (string-equal (nth (+ i 1) tokenList) "KW_APPEND") (string-equal (nth (+ i 1) tokenList) "KW_CONCAT")))) 
                
                    (setq listFlag (+ listFlag 1))
                    (setq ind i)
                    (setq counter 1)

                    (loop while (/= counter 0) do
                        (setq i (+ i 1))
                        (if (or (string-equal (nth i tokenList) "OP_OP") (string-equal (nth i tokenList) "OP_LISTOP"))
                            (setq counter (+ counter 1))
                            (progn
                                (when (string-equal (nth i tokenList) "OP_CP")
                                    (setq counter (- counter 1)))
                            )
                        )
                    )

                    (setq returnVal (parser (subseq strList ind (+ i 1)) (subseq tokenList ind (+ i 1))))

                    (when (typep returnVal 'list)
                        (setq err nil)
                    )
                    (when (not (typep returnVal 'list))
                        (setq err t)
                    )
                    (if (equal err nil)
                        (setq liste returnVal)
                        (progn
                            ;(format t "SYNTAX_ERROR Expression not recognized~%~%")
                            (return-from parser "exception")
                    	)
                    )
                )
            )
            (progn
                ;(format t "SYNTAX_ERROR Expression not recognized~%~%")
                (return-from parser "exception")
            )
        )
        (if (and (= i (- (length strList) 2)) (= listFlag 1))
            (setq retVal liste)
            (progn
                ;(format t "SYNTAX_ERROR Expression not recognized~%~%")
                (return-from parser "exception")
        	)
        )
    )   

    ;ok
    (when (and (string-equal (nth 0 tokenList) "OP_OP") (or (string-equal (nth 1 tokenList) "KW_DEFVAR") (string-equal (nth 1 tokenList) "KW_SET")))
        (setq numStr "") 
        (setq err t)
        (setq errFlag nil)

        (when (string-equal (nth 2 tokenList) "IDENTIFIER")
            (setq numStr (concatenate 'string numStr (nth 2 strList)))

            (when (string-equal (nth 3 tokenList) "OP_OP")
                (setq err nil)
                (setq i 3)
                (setq counter 1)
                (loop while (/= counter 0) do
                    (setq i (+ i 1))
                    (if (string-equal (nth i tokenList) "OP_OP")
                        (setf counter (+ 1 counter))
                        (progn
                            (when (string-equal (nth i tokenList) "OP_CP")
                                (setf counter (- counter 1)))
                        )
                    )
                )

                (setq returnVal (parser (subseq strList 3 (+ i 1)) (subseq tokenList 3 (+ i 1))))

                (if (typep returnVal 'integer) 
                    (setq err nil)
                    (setq err t)
                )
                (when (equal nil err)
                    (setq numStr (concatenate 'string numStr "=" (write-to-string returnVal))))
                (when (equal err t)
                    ;(format t "SYNTAX_ERROR Expression not recognized~%~%")
                    (return-from parser "exception")
                )
            )  
                      
            (when (string-equal (nth 3 tokenList) "VALUE")
                (setq err nil)
                (setq numStr (concatenate 'string numStr "=" (nth 3 strList))) ;??????????
            )
        )

        (if (equal err t)
            (progn
                ;(format t "SYNTAX_ERROR Expression not recognized~%~%")
                (return-from parser "exception")
            )
            (setq retVal numStr)
        )
    )   

    (let ((ind_ 0) (liste '()) (err t))  
        (when (or (and (string-equal (nth 0 tokenList) "OP_OP") (string-equal (nth 1 tokenList) "KW_LIST")) (string-equal (nth 0 tokenList) "OP_LISTOP"))
            (when (string-equal (nth 0 tokenList) "OP_LISTOP")
                (setq ind_ 1))
            (when (string-equal (nth 0 tokenList) "OP_OP")
                (setq ind_ 2))

            (loop for i from ind_ to (- (length strList) 1) do
                (setq err t)
                (when (string-equal (nth i tokenList) "OP_CP")
                    (setq err nil))
                (when (string-equal (nth i tokenList) "VALUE") 
                    (setq err nil)
                    (setq liste (append liste (list (parse-integer (nth i strList)))))
                )
                (when (equal err t)
                    ;(format t "SYNTAX_ERROR Expression not recognized~%~%")
                    (return-from parser "exception")
                )
            )  
            (setq errFlag nil)          
            (setq retVal liste)            
        )
    )

    (let ((liste '()) (err t))
        (when (and (string-equal (nth 0 tokenList) "OP_OP") (string-equal (nth 1 tokenList) "IDENTIFIER"))
            (if (or (string-equal (nth 2 tokenList) "OP_OP") (string-equal (nth 2 tokenList) "OP_LISTOP"))
                (progn
                    (setq errFlag nil)
                    (loop for i from 2 to (- (length strList) 1) do
                        (when (or (string-equal (nth i tokenList) "OP_LISTOP") 
                            (and (string-equal (nth i tokenList) "OP_OP") (or (string-equal (nth (+ i 1) tokenList) "KW_APPEND") (string-equal (nth (+ i 1) tokenList) "KW_CONCAT")))) 

                            (setq ind i)
                            (setq counter 1)

                            (loop while (/= counter 0) do
                                (setq i (+ i 1))
                                (if (or (string-equal (nth i tokenList) "OP_OP") (string-equal (nth i tokenList) "OP_LISTOP"))
                                    (setq counter (+ counter 1))
                                    (progn
                                        (when (string-equal (nth i tokenList) "OP_CP")
                                            (setq counter (- counter 1)))
                                    )
                                )
                            )

                            (setq returnVal (parser (subseq strList ind (+ i 1)) (subseq tokenList ind (+ i 1))))

                            (if (typep returnVal 'list)
                                (setq err nil)
                                (setq err t)
                            )
                            (if (equal err nil) 
                                (setq liste (append liste returnVal))
                                (progn
                                    ;(format t "SYNTAX_ERROR Expression not recognized~%~%")
                                    (return-from parser "exception")
                                )
                            )
                            (setq err nil)
                        )

                        (when (string-equal (nth i tokenList) "OP_CP")
                            (setq err nil)
                        )
                        (when (equal err T)
                            ;(format t "SYNTAX_ERROR Expression not recognized~%~%")
                            (return-from parser "exception")
                        )
                        
                    )
                    (setq retVal liste)
                )
                (progn
                    (setq errFlag nil)
                    (loop for i from 1 to (- (length strList) 1) do
                        (setq err t)
                        (when (string-equal (nth i tokenList) "IDENTIFIER") 
                            (setq liste (append liste (list (nth i strList))))
                            (setq err nil)
                        )
                        (when (string-equal (nth i tokenList) "OP_CP")
                            (setq err nil))

                        (when (equal err T)
                            ;(format t "SYNTAX_ERROR Expression not recognized~%~%")
                            (return-from parser "exception")
                        )
                    )
                    (setq retVal liste)
                )
            )
        )
    )


    (if (equal errFlag t)
    	(progn
            ;(format t "SYNTAX_ERROR Expression not recognized~%~%")
            (return-from parser "exception")
        )
        retVal ;else
    )
)

(defun operation(strList tokenList token)
	(let ((totalSum 0) (err t))
        (loop for i from 2 to (- (length strList) 1) do
            (when (string-equal (nth i tokenList) "VALUE")
            	(if (string-equal token "OP_PLUS")
            		(setq totalSum (+ totalSum (parse-integer (nth i strList))))
	                (if (= i 2)
	                    (setq totalSum (parse-integer (nth i strList)))
	                    (progn
	                    	(when (string-equal token "OP_MINUS")
	                			(setq totalSum (- totalSum (parse-integer (nth i strList)))))
	                    	(when (string-equal token "OP_MULT")
	                			(setq totalSum (* totalSum (parse-integer (nth i strList)))))  
	                    	(when (string-equal token "OP_DIV")
	                			(setq totalSum (/ totalSum (parse-integer (nth i strList))))) 
	                    	(when (string-equal token "OP_DBLMULT")
	                			(setq totalSum (expt totalSum (parse-integer (nth i strList)))))                    			               	
	                	)
	                )
	            )
                (setq err nil)
            )
         
            (when (string-equal (nth i tokenList) "OP_OP")
                (setq ind i)
                (setq counter 1)

                (loop while (/= counter 0) do
                    (setq i (+ i 1))
                    (if (string-equal (nth i tokenList) "OP_OP")
                        (setq counter (+ counter 1))
                        (progn
                            (when (string-equal (nth i tokenList) "OP_CP")
                                (setq counter (- counter 1)))
                        )
                    )
                )

                (setq returnVal (parser (subseq strList ind (+ i 1)) (subseq tokenList ind (+ i 1))))

                (if (typep returnVal 'integer)
                    (setq err nil)
                	(setq err t)
                )

                (when (equal nil err)
                	(if (string-equal token "OP_PLUS")
                		(setq totalSum (+ totalSum returnVal))
	                    (if (= ind 2)
	                        (setq totalSum returnVal)
	                        (progn
	                        	(when (string-equal token "OP_MINUS")
	                    			(setq totalSum (- totalSum returnVal)))
	                        	(when (string-equal token "OP_MULT")
	                    			(setq totalSum (* totalSum returnVal)))  
	                        	(when (string-equal token "OP_DIV")
	                    			(setq totalSum (/ totalSum returnVal))) 
	                        	(when (string-equal token "OP_DBLMULT")
	                    			(setq totalSum (expt totalSum returnVal)))                        		
	                    	)
	                    )
	                )    
                )
                (when (equal err t)
                    ;(format t "SYNTAX_ERROR Expression not recognized~%~%")
                    (return-from operation nil)
                )  
            )

            (when (equal err t)
                ;(format t "SYNTAX_ERROR Expression not recognized~%~%")
                (return-from operation nil)
            )
        )
        totalSum 
	)
)

(defun logic (strList tokenList token)
	(let ((boolFlag ) (err t))
        (loop for i from 2 to (- (length strList) 1) do
            (when (or (string-equal (nth i tokenList) "KW_TRUE") (string-equal (nth i tokenList) "KW_NIL") (string-equal (nth i tokenList) "KW_FALSE"))
                (if (= i 2)
                	(progn
                        (if (string-equal (nth i tokenList) "KW_TRUE")
                            (setq boolFlag t)
                        	(setq boolFlag nil)
                        )
                    )
                    (progn ;else
                        (if (string-equal (nth i tokenList) "KW_TRUE")
                        	(progn
                        		(if (string-equal token "KW_AND")
                            		(setq boolFlag (and boolFlag t))
                            		(setq boolFlag (or boolFlag t))
                            	)	
                            )
                            (progn
                        		(if (string-equal token "KW_AND")
                            		(setq boolFlag (and boolFlag nil))
                            		(setq boolFlag (or boolFlag nil))
                            	)	                            		
                        	)
                        )
                    )
                )
                (setq err nil)
            )
            (when (string-equal (nth i tokenList) "OP_OP")
            	(setq ind i)
            	(setq counter 1)

                (loop while (/= counter 0) do
                    (setq i (+ i 1))
                    (if (string-equal (nth i tokenList) "OP_OP")
                        (setq counter (+ counter 1))
                        (progn
                            (when (string-equal (nth i tokenList) "OP_CP")
                                (setq counter (- counter 1)))
                        )
                    )
                )

                (setq returnVal (parser (subseq strList ind (+ i 1)) (subseq tokenList ind (+ i 1))))

                (if (typep returnVal 'boolean)
                    (setq err nil)
                	(setq err t)
                )

               (when (equal nil err)
                    (if (= ind 2)
                        (setq totalSum returnVal)
                        (progn
                        	(if (string-equal token "KW_AND")
                    			(setq boolFlag (and boolFlag returnVal))
                    			(setq boolFlag (or boolFlag returnVal))
                    		)
                    	)
                    )
                )
                (when (equal err t)
                    ;(format t "SYNTAX_ERROR Expression not recognized~%~%")
                    (return-from logic 0)
                ) 

            )
            (when (equal err t)
                ;(format t "SYNTAX_ERROR Expression not recognized~%~%")
                (return-from logic 0)
            )
        )
        boolFlag
    )   
)

;chechs if item is member of list
(defun is-member(list_ item)
	(loop for i from 0 to (- (length list_) 1) do
		(if (string-equal item (nth i list_))
			(return-from is-member T))
	)
	(return-from is-member NIL)
)

(defun lexer(line)
	(setq letter '("a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z"))
	(setq number '("0" "1" "2" "3" "4" "5" "6" "7" "8" "9"))
	(setq lexemes '())

	(setq len (length line))
	(setq first_ 0)
	(setq last_ 1)
	(setq flag 0)

	(loop while (/= first_ len) do
		(setq chr (subseq line first_ last_)) ; current char
		(setq unknown 0)

		;;;;;;;;;;;;;;;;;;;;; OPERATOR CHECKING ;;;;;;;;;;;;;;;;;;;;;
		(when (string-equal chr "+")
			;(format t "OP_PLUS~%")
			(setf lexemes (append lexemes (list (list "+" "OP_PLUS"))))
			;(write-to-file fileout "OP_PLUS~%")
			(setf unknown 1)
		)
		(when (string-equal chr "-")
			;(format t "OP_MINUS~%")
			(setf lexemes (append lexemes (list (list "-" "OP_MINUS"))))
			;(write-to-file fileout "OP_MINUS~%")
			(setf unknown 1)
		)
		(when (string-equal chr "/")
			;(format t "OP_DIV~%")
			(setf lexemes (append lexemes (list (list "/" "OP_DIV"))))
			;(write-to-file fileout "OP_DIV~%")
			(setf unknown 1)
		)
		(when (string-equal chr "*")
			(setq first_ (+ 1 first_))
			(setq last_ (+ 1 last_))

			(if (/= first_ len)
				(progn
					(setq chr (subseq line first_ last_))
					(if (string-equal chr "*")
						(progn
							;(format t "OP_DBLMULT~%")
							(setf lexemes (append lexemes (list (list "**" "OP_DBLMULT"))))
							;(write-to-file fileout "OP_DBLMULT~%")
						)
						(progn
							(setq first_ (- first_ 1))
							(setq last_ (- last_ 1))
							(setq chr (subseq line first_ last_))
							;(format t "OP_MULT~%")
							(setf lexemes (append lexemes (list (list "*" "OP_MULT"))))
							;(write-to-file fileout "OP_MULT~%")
						)
					)
				)
				(progn
					(setq first_ (- first_ 1))
					(setq last_ (- last_ 1))
					(setq chr (subseq line first_ last_))						
					;(format t "OP_MULT~%") ;else
					(setf lexemes (append lexemes (list (list "*" "OP_MULT"))))
					;(write-to-file fileout "OP_MULT~%")
				)
			)
			(setf unknown 1)
		)
		(when (string-equal chr "(")
			;(format t "OP_OP~%")
			(setf lexemes (append lexemes (list (list "(" "OP_OP"))))
			;(write-to-file fileout "OP_OP~%")
			(setf unknown 1)
		)	

		(when (string-equal chr "'")
			(setq first_ (+ 1 first_))
			(setq last_ (+ 1 last_))

			(if (/= first_ len)
				(progn
					(setq chr (subseq line first_ last_))
					(if (string-equal chr "(")
						(progn
							;(format t "OP_DBLMULT~%")
							(setf lexemes (append lexemes (list (list "'(" "OP_LISTOP"))))
							;(write-to-file fileout "OP_LISTOP~%")
							(setf unknown 1)
						)
						(progn
							(setq first_ (- first_ 1))
							(setq last_ (- last_ 1))
							(setq chr (subseq line first_ last_))
						)
					)
				)
				(progn
					(setq first_ (- first_ 1))
					(setq last_ (- last_ 1))
					(setq chr (subseq line first_ last_))						
				)
			)
		)

		(when (string-equal chr ")")
			;(format t "OP_CP~%")
			(setf lexemes (append lexemes (list (list ")" "OP_CP"))))
			;(write-to-file fileout "OP_CP~%")
			(setf unknown 1)
		)	
		(when (string-equal chr "\"")
			(if (= flag 0)
				(progn
					;(format t "OP_OC~%")
					(setf lexemes (append lexemes (list (list "\"" "OP_OC"))))
					;(write-to-file fileout "OP_OC~%")
					(setq flag 1)
				)
				(progn
					;(format t "OP_CC~%")
					(setf lexemes (append lexemes (list (list "\"" "OP_CC"))))
					;(write-to-file fileout "OP_CC~%")
					(setq flag 0)
				)					
			)
			(setf unknown 1)
		)	
		(when (string-equal chr ",")
			;(format t "OP_COMMA~%")
			(setf lexemes (append lexemes (list (list "," "OP_COMMA"))))
			;(write-to-file fileout "OP_COMMA~%")
			(setf unknown 1)
		)	

		;;;;;;;;;;;;;;;;;;;;; VALUE CHECKING ;;;;;;;;;;;;;;;;;;;;;	
		(when (is-member number chr)
			(setq num "")
			(setq zero_flag 0)
			;(setq num (concatenate 'string num chr))

			(if (string-equal chr "0")
				(setq num (concatenate 'string num chr)))

			(when (string-not-equal chr "0")	
				(setf zero_flag 1)
				(loop while (and (/= first_ len) (is-member number chr)) do
					(setq num (concatenate 'string num chr))
					(setq first_ (+ 1 first_))
					(setq last_ (+ 1 last_))	
					(if (/= first_ len)
						(setq chr (subseq line first_ last_)))				
				)									
				(setq first_ (- first_ 1))
				(setq last_ (- last_ 1))
				(setq chr (subseq line first_ last_))
			)

			;(format t "VALUE~%")
			(setf lexemes (append lexemes (list (list num "VALUE"))))
			;(write-to-file fileout "VALUE~%")
			(setf unknown 1)			
		)	

		;;;;;;;;;;;;;;;;;;;;; COMMENT CHECKING ;;;;;;;;;;;;;;;;;;;;;
		(when (string-equal chr ";")
			(setq first_ (+ 1 first_))
			(setq last_ (+ 1 last_))

			(if (/= first_ len)
				(progn			
					(setq chr (subseq line first_ last_))
					(if (string-equal chr ";")
						(progn
							;(format t "COMMENT~%")
							;(setf lexemes (append lexemes (list (list ";;" "COMMENT"))))
							;(write-to-file fileout "COMMENT~%")
							(return-from lexer lexemes)
						)
						(progn
							(setq first_ (- first_ 1))
							(setq last_ (- last_ 1))
							(setq chr (subseq line first_ last_))
						)
					)
				)
				(progn
					(setq first_ (- first_ 1))
					(setq last_ (- last_ 1))
					(setq chr (subseq line first_ last_))						
				)
			)
		)

		;;;;;;;;;;;;;;;;;;;;; IDENTIFIER and KEYWORD CHECKING ;;;;;;;;;;;;;;;;;;;;;
		(when (is-member letter chr)	
			(setq str "")

			(loop while(and (/= first_ len) (or (is-member number chr) (is-member letter chr) (string-equal chr "."))) do		
				(setq str (concatenate 'string str chr))		
				(setq first_ (+ 1 first_))
				(setq last_ (+ 1 last_))

				(if (/= first_ len)
					(setq chr (subseq line first_ last_)))
			)
			(setq first_ (- first_ 1))
			(setq last_ (- last_ 1))	
			(setq chr (subseq line first_ last_))

			(when (equal NIL (is-keyword str)) ;checks if it is a keyword
				;(format t "IDENTIFIER~%")
				(setf lexemes (append lexemes (list (list str "IDENTIFIER"))))
				;(write-to-file fileout "IDENTIFIER~%")
			)			


			(setf unknown 1)
		)

		;ignore white spaces
		(if (or (string-equal chr (string #\Space)) (string-equal chr (string #\Tab)) (string-equal chr (string #\Newline)))
			(setf unknown 1))

		(when (= 0 unknown) ;???????????????????????????????????????????
			;;(format t "SYNTAX_ERROR ~A cannot be tokenized~%" chr)
			;(write-to-file fileout "SYNTAX_ERROR ")
			;(write-to-file fileout chr)
			;(write-to-file fileout " cannot be tokenized~%")
			(return-from lexer nil)
		)

		(setq first_ (+ 1 first_))
		(setq last_ (+ 1 last_))
	)
	;;;(print "lexemes")
	lexemes
)

(defun checkParentheses (input)
    (setq flag 0)
    (setq returnVal t)
    (loop for i from 0 to (- (length input) 1) do
        (when (or (string-equal (nth i input) "(") (string-equal (nth i input) "'("))
            (Setq flag (+ flag 1))
        )
        (when  (string-equal (nth i input) ")") 
            (Setq flag (- flag 1))
        )
        (when   (and (equal i (- ( length input )1) )(not (equal flag 0)))
            (setq returnVal nil)
        )

    )
    returnVal
)

;checks if str is a keyword
(defun is-keyword(str)
	;(setq lexemes '())
	(when (string-equal str "and")
		;(format t "KW_AND~%")
		(setf lexemes (append lexemes (list (list str "KW_AND"))))
		;(write-to-file fileout "KW_AND~%")
		(return-from is-keyword T))
	(when (string-equal str "or")
		;(format t "KW_OR~%")
		(setf lexemes (append lexemes (list (list str "KW_OR"))))
		;(write-to-file fileout "KW_OR~%")
		(return-from is-keyword T))
	(when (string-equal str "not")
		;(format t "KW_NOT~%")
		(setf lexemes (append lexemes (list (list str "KW_NOT"))))
		;(write-to-file fileout "KW_NOT~%")
		(return-from is-keyword T))	
	(when (string-equal str "equal")
		;(format t "KW_EQUAL~%")
		(setf lexemes (append lexemes (list (list str "KW_EQUAL"))))
		;(write-to-file fileout "KW_EQUAL~%")
		(return-from is-keyword T))	
	(when (string-equal str "less")
		;(format t "KW_LESS~%")
		(setf lexemes (append lexemes (list (list str "KW_LESS"))))
		;(write-to-file fileout "KW_LESS~%")
		(return-from is-keyword T))	
	(when (string-equal str "nil")
		;(format t "KW_NIL~%")
		(setf lexemes (append lexemes (list (list str "KW_NIL"))))
		;(write-to-file fileout "KW_NIL~%")
		(return-from is-keyword T))	
	(when (string-equal str "list")
		;(format t "KW_LIST~%")
		(setf lexemes (append lexemes (list (list str "KW_LIST"))))
		;(write-to-file fileout "KW_LIST~%")
		(return-from is-keyword T))	
	(when (string-equal str "append")
		;(format t "KW_APPEND~%")
		(setf lexemes (append lexemes (list (list str "KW_APPEND"))))
		;(write-to-file fileout "KW_APPEND~%")
		(return-from is-keyword T))	
	(when (string-equal str "concat")
		;(format t "KW_CONCAT~%")
		(setf lexemes (append lexemes (list (list str "KW_CONCAT"))))
		;(write-to-file fileout "KW_CONCAT~%")
		(return-from is-keyword T))	
	(when (string-equal str "set")
		;(format t "KW_SET~%")
		(setf lexemes (append lexemes (list (list str "KW_SET"))))
		;(write-to-file fileout "KW_SET~%")
		(return-from is-keyword T))																		
	(when (string-equal str "deffun")
		;(format t "KW_DEFFUN~%")
		(setf lexemes (append lexemes (list (list str "KW_DEFFUN"))))
		;(write-to-file fileout "KW_DEFFUN~%")
		(return-from is-keyword T))
	(when (string-equal str "defvar")
		;(format t "KW_DEFFUN~%")
		(setf lexemes (append lexemes (list (list str "KW_DEFVAR"))))
		;(write-to-file fileout "KW_DEFVAR~%")
		(return-from is-keyword T))			
	(when (string-equal str "for")
		;(format t "KW_FOR~%")
		(setf lexemes (append lexemes (list (list str "KW_FOR"))))
		;(write-to-file fileout "KW_FOR~%")
		(return-from is-keyword T))	
	(when (string-equal str "while")
		;(format t "KW_FOR~%")
		(setf lexemes (append lexemes (list (list str "KW_WHILE"))))
		;(write-to-file fileout "KW_WHILE~%")
		(return-from is-keyword T))		
	(when (string-equal str "if")
		;(format t "KW_IF~%")
		(setf lexemes (append lexemes (list (list str "KW_IF"))))
		;(write-to-file fileout "KW_IF~%")
		(return-from is-keyword T))	
	(when (string-equal str "exit")
		;(format t "KW_EXIT~%")
		(setf lexemes (append lexemes (list (list str "KW_EXIT"))))
		;(write-to-file fileout "KW_EXIT~%")
		(return-from is-keyword T))								
	(when (string-equal str "load")
		;(format t "KW_LOAD~%")
		(setf lexemes (append lexemes (list (list str "KW_LOAD"))))
		;(write-to-file fileout "KW_LOAD~%")
		(return-from is-keyword T))	
	(when (string-equal str "disp")
		;(format t "KW_DISP~%")
		(setf lexemes (append lexemes (list (list str "KW_DISP"))))
		;(write-to-file fileout "KW_DISP~%")
		(return-from is-keyword T))	
	(when (string-equal str "true")
		;(format t "KW_TRUE~%")
		(setf lexemes (append lexemes (list (list str "KW_TRUE"))))
		;(write-to-file fileout "KW_TRUE~%")
		(return-from is-keyword T))						
	(when (string-equal str "false")
		;(format t "KW_FALSE~%")
		(setf lexemes (append lexemes (list (list str "KW_FALSE"))))
		;(write-to-file fileout "KW_FALSE~%")
		(return-from is-keyword T))
	(return-from is-keyword NIL)	
)



;writes tokenList to the file
(defun write-to-file (file token)
	(with-open-file (str file :direction :output
                     		  :if-exists :append
                     		  :if-does-not-exist :create)
  		(format str token)
  		(close str)
  	)
)

(setq line *args*)

(if (= 0 (length line))
	(gppinterpreter)
	(progn
		(if (= 1 (length line))
			(gppinterpreter (car line))
			(print "You entered wrong command line.")
		)		
	)
)
